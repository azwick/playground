{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/Anne/Documents/playground/setting-up-toolchain/pages/index.js\";\nimport React, { useState } from \"react\";\n/* Questions:\n1. Why do I need a return when I'm using an arrow function? Isn't it always returing something?\n*/\n// Two bind data example\n\nconst inputElement = () => {\n  /* Explaination behinde the destructuring function\n  const results = useState(\"\");\n  const inputText = results[0]; // current state\n  const setInputText = results[1]; // updated state\n  */\n  const {\n    0: inputText,\n    1: setInputText\n  } = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    onChange: e => {\n      setInputText(e.target.value);\n    },\n    placeholder: \"Enter Some Text\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 12\n  }, this);\n};\n\nexport default inputElement;","map":{"version":3,"sources":["/Users/Anne/Documents/playground/setting-up-toolchain/pages/index.js"],"names":["React","useState","inputElement","inputText","setInputText","e","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA;AACA;AACA;AAEA;;AACA,MAAMC,YAAY,GAAG,MAAM;AACvB;AACJ;AACA;AACA;AACA;AACI,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BH,QAAQ,CAAC,EAAD,CAA1C;AAEA,sBAAO;AAAO,IAAA,QAAQ,EAAGI,CAAD,IAAO;AAACD,MAAAA,YAAY,CAACC,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AAA6B,KAAtD;AACN,IAAA,WAAW,EAAC;AADN;AAAA;AAAA;AAAA;AAAA,UAAP;AAEH,CAVD;;AAYA,eAAeL,YAAf","sourcesContent":["import React, {useState} from \"react\";\n\n/* Questions:\n1. Why do I need a return when I'm using an arrow function? Isn't it always returing something?\n*/\n\n// Two bind data example\nconst inputElement = () => {\n    /* Explaination behinde the destructuring function\n    const results = useState(\"\");\n    const inputText = results[0]; // current state\n    const setInputText = results[1]; // updated state\n    */\n    const [inputText, setInputText] = useState(\"\");\n\n    return <input onChange={(e) => {setInputText(e.target.value)}}\n     placeholder=\"Enter Some Text\" />;\n};\n\nexport default inputElement;"]},"metadata":{},"sourceType":"module"}