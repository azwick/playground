{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/Anne/Documents/playground/setting-up-toolchain/pages/ImageToggleOnScroll.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nconst ToggleImg = ({\n  primaryImg,\n  secondaryImg\n}) => {\n  const imageRef = useRef(null); //   const [isLoading, setIsLoading] = useState(true);\n  // Code magic for finding out which img is in the middle of the view\n\n  const isInView = () => {\n    const rect = imageRef.current.getBoundingClientRect();\n    return rect.top >= 0 && rect.bottom <= window.innerHeight;\n  };\n\n  const {\n    0: inView,\n    1: setInView\n  } = useState(false); // False defines the default value = no img is by default in the view\n\n  useEffect(() => {\n    // setIsLoading(false);\n    setInView(isInView());\n    window.addEventListener(\"scroll\", scrollHandler);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, []); // Only run when the component is first redered = write []\n  // Everytime of scrolling, this will be called again\n\n  const scrollHandler = () => {\n    setInView(isInView());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    width: \"400\",\n    alt: \"\",\n    ref: imageRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\nconst ImageToggleOnScroll = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [1, 2, 3, 4, 5, 6].map(myId => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ToggleImg, {\n          primaryImg: `/static/bw/pic-0${myId}.jpg`,\n          secondaryImg: `/static/ori/pic-0${myId}.jpg`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)\n      }, myId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["/Users/Anne/Documents/playground/setting-up-toolchain/pages/ImageToggleOnScroll.js"],"names":["React","useEffect","useRef","useState","ToggleImg","primaryImg","secondaryImg","imageRef","isInView","rect","current","getBoundingClientRect","top","bottom","window","innerHeight","inView","setInView","addEventListener","scrollHandler","removeEventListener","ImageToggleOnScroll","map","myId"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA;AAAb,CAAD,KAAgC;AAChD,QAAMC,QAAQ,GAAGL,MAAM,CAAC,IAAD,CAAvB,CADgD,CAGlD;AAEE;;AACA,QAAMM,QAAQ,GAAG,MAAM;AACrB,UAAMC,IAAI,GAAGF,QAAQ,CAACG,OAAT,CAAiBC,qBAAjB,EAAb;AACA,WAAOF,IAAI,CAACG,GAAL,IAAY,CAAZ,IAAiBH,IAAI,CAACI,MAAL,IAAeC,MAAM,CAACC,WAA9C;AACD,GAHD;;AAKA,QAAM;AAAA,OAACC,MAAD;AAAA,OAAQC;AAAR,MAAqBd,QAAQ,CAAC,KAAD,CAAnC,CAXgD,CAWJ;;AAE5CF,EAAAA,SAAS,CAAC,MAAM;AACd;AACAgB,IAAAA,SAAS,CAACT,QAAQ,EAAT,CAAT;AACAM,IAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACA,WAAO,MAAM;AACXL,MAAAA,MAAM,CAACM,mBAAP,CAA2B,QAA3B,EAAqCD,aAArC;AACD,KAFD;AAGD,GAPQ,EAOP,EAPO,CAAT,CAbgD,CAoBzC;AAGP;;AACA,QAAMA,aAAa,GAAG,MAAM;AACxBF,IAAAA,SAAS,CAACT,QAAQ,EAAT,CAAT;AACH,GAFD;;AAIA,sBACE;AACE,IAAA,GAAG,EAAEQ,MAAM,GAAGV,YAAH,GAAkBD,UAD/B;AAEE,IAAA,KAAK,EAAC,KAFR;AAGE,IAAA,GAAG,EAAC,EAHN;AAGS,IAAA,GAAG,EAAEE;AAHd;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAnCD;;AAqCA,MAAMc,mBAAmB,GAAG,MAAM;AAChC,sBACE;AAAA,cACG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmBC,GAAnB,CAAwBC,IAAD,IAAU;AAChC,0BACE;AAAA,+BACE,QAAC,SAAD;AACE,UAAA,UAAU,EAAG,mBAAkBA,IAAK,MADtC;AAEE,UAAA,YAAY,EAAG,oBAAmBA,IAAK;AAFzC;AAAA;AAAA;AAAA;AAAA;AADF,SAAUA,IAAV;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KATA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAfD;;AAiBA,eAAeF,mBAAf","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\n\nconst ToggleImg = ({primaryImg, secondaryImg}) => {\n  const imageRef = useRef(null);\n\n//   const [isLoading, setIsLoading] = useState(true);\n\n  // Code magic for finding out which img is in the middle of the view\n  const isInView = () => {\n    const rect = imageRef.current.getBoundingClientRect();\n    return rect.top >= 0 && rect.bottom <= window.innerHeight;\n  }\n\n  const [inView,setInView] = useState(false); // False defines the default value = no img is by default in the view\n\n  useEffect(() => {\n    // setIsLoading(false);\n    setInView(isInView());\n    window.addEventListener(\"scroll\", scrollHandler);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  },[]); // Only run when the component is first redered = write []\n\n\n  // Everytime of scrolling, this will be called again\n  const scrollHandler = () => {\n      setInView(isInView());\n  };\n\n  return (\n    <img \n      src={inView ? secondaryImg : primaryImg}\n      width=\"400\" \n      alt=\"\" ref={imageRef}\n    />\n  );\n};\n\nconst ImageToggleOnScroll = () => {\n  return (\n    <div>\n      {[1, 2, 3, 4, 5, 6].map((myId) => {\n        return (\n          <div key={myId}>\n            <ToggleImg \n              primaryImg={`/static/bw/pic-0${myId}.jpg`}\n              secondaryImg={`/static/ori/pic-0${myId}.jpg`}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ImageToggleOnScroll;"]},"metadata":{},"sourceType":"module"}